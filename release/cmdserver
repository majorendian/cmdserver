#!/usr/bin/env ruby

require "optparse"
require "bundler/setup"
require "cmdserver"

DEFAULT_WORKDIR = "~/.cmdserver"
DEFAULT_MODULE_DIR = DEFAULT_WORKDIR + "/modules"

options = {
    :workdir => DEFAULT_WORKDIR,
    :module_dir => DEFAULT_MODULE_DIR,
    :debug => false,
}
optparse = OptionParser.new do |opts|
    opts.banner = <<"HELP"
Usage: cmdserver [options]
HELP

    opts.on("-d", "--daemon", "Daemonize process") do
        options[:daemon] = true
    end

    opts.on("-p", "--port PORTNUM", "Specify arbitrary port") do |portarg|
        options[:port] = portarg
    end

    opts.on("-m", "--module-dir MODULE_DIR", "Load modules from MODULE_DIR instead of ~/.cmdserver/modules" ) do |module_dir|
        options[:module_dir] = module_dir
    end

    opts.on("--skel", "Dumps a simple module template to standard output.") do
        puts Cmdserver::Templates::BasicTemplate.new().body
        exit
    end

    opts.on("--debug", "Turn on debugging information.") do
        options[:debug] = true
    end

    opts.on("-h", "--help", "Display this help message") do
        puts opts
        exit
    end
end

optparse.parse!


custom_settings = Cmdserver::CustomSettings.new(options)
port = options[:port] 
if port.nil?
    puts "Port required.\nSee --help"
    exit(1)
end
server = Cmdserver::TCPCommandServer.new(port, {}, settings=custom_settings, debug=options[:debug])

begin
    if options[:daemon]
        daem = Cmdserver::CLI::ServerDaemonizer.new(server)
        daem.daemonize()
    else
        server.start()
    end
rescue Interrupt => ie
    puts
    puts "Terminating..."
    server.socket.close()
    exit
end
